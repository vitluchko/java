package Lab0;

public class Variant6 {

    /**
     *
     * @param a is edge of the rectangular parallelepiped
     * @param b is edge of the rectangular parallelepiped
     * @param c is edge of the rectangular parallelepiped
     * @return Volume and Square of this figure
     */
    public static int[] inputOutputTask(int a, int b, int c) {

        if (a <= 0 || b <= 0 || c <= 0)
            throw new IllegalArgumentException("Numbers have to be greater than zero!!!");

        int[] result = new int[2];

        result[0] = a * b * c;

        result[1] = 2 * (a * b + b * c + a * c);

        return result;
    }

    /**
     *
     * @param a is integer number
     * @return decimal and integer part of a number
     */
    public static int[] integerTask(int a) {
        if ((10 > Math.abs(a)) || (Math.abs(a) > 99))
            throw new IllegalArgumentException("Number has to be between 10 and 99");

        int[] result = new int[2];

        result[0] = Math.abs(a / 10);

        result[1] = Math.abs(a % 10);;

        return result;
    }

    /**
     *
     * @param a is integer number
     * @param b is integer number
     * @param c is integer number
     * @return is the statement a < b < c true or false
     */
    public static boolean booleanTask(int a, int b, int c) {

        return !(a >= b || b >= c);
    }

    /**
     *
     * @param a is integer number
     * @param b is integer number
     * @return the larger between them
     */
    public static int ifTask(int a, int b) {

        if (a == b)
            throw new IllegalArgumentException("Numbers are equal!!!");

        if (a < b)
            return b;

            return a;
    }

    /**
     *
     * @param a is units identifier
     * @param b is distance
     * @return distance in meters
     */
    public static double switchTask(int a, double b) {

        switch (a) {
            case 1:
                return b * 0.1;

            case 2:
                return b * 1000;

            case 3:
                return b;

            case 4:
                return (b * 0.001);

            case 5:
                return (b * 0.01);

            default:
                throw new IllegalArgumentException("Identifier has to be between 1-5!!!");
        }
    }

    /**
     *
     * @param a is price of 1 kg sweets
     * @return price from 1.2, 1.4,...,2
     */
    public static double[] forTask(double a) {

        if (a <= 0)
            throw new IllegalArgumentException("Price is wrong!!!");

        double[] result = new double[5];
        int k = 0;

        for(double i = 1.2; i <= 2; i+=0.2) {
            result[k] = i * a;
            k++;
        }

        return result;
    }

    /**
     *
     * @param n is integer number
     * @return double factorial
     */
    public static double whileTask(int n) {

        if (n < 0)
            throw new NumberFormatException("Number has to be grater or equal zero!!!");

        double result = 1; int r = 2;

        while (n > 0 || n > 1) {

            result *= (double)n;

            n -= 2;
        }

        return result;
    }

    /**
     *
     * @param n is size of massive
     * @param a first number in array
     * @param b second number in array
     * @return formed one-dimensional array
     */
    public static int[] arrayTask(int n, int a, int b) {

        if (n < 2)
            throw new NumberFormatException("Number has to be grater than 2 or equal 2 !!!");

        int[] res = new int[n];

        int sum = 0;

        res[0] = a; res[1] = b;

        for(int i = 2; i < n; i++) {
            for(int j = 0; j <= i; j++) {

                sum += res[j];
            }
            res[i] = sum;
            sum = 0;
        }

        return res;
    }

    /**
     *
     * @param m number of strings
     * @param n number of columns
     * @param q the denominator of the progression
     * @param N massive of first column
     * @return
     */
    public static int[][] matrixTask(int m, int n, int q, int[] N) {

        if (m <= 0 || n <= 0)
            throw new IllegalArgumentException("M and N have to be positive!!!");

        int res[][] = new int[m][n];

        for (int i = 0; i < n; i++)
            res[0][i] = N[i];

        for(int i = 1; i < m; i++)
            for (int j = 0; j < n; j ++)
                res[i][j] = res[i - 1][j] * q;

        return res;
    }

    public static void main(String... strings) {
        System.out.println("InputOutputTask:");
        int result[] = inputOutputTask(2,1,9);
        System.out.println("Volume: " + result[0]);
        System.out.println("Square: " + result[1]);
        System.out.println();

        System.out.println("IntegerTask:");
        result = integerTask(14);
        System.out.println("Left part: " + result[0]);
        System.out.println("Right part: " + result[1]);
        System.out.println();

        System.out.println("BooleanTask:");
        System.out.println(booleanTask(2, 4, 6));
        System.out.println();

        System.out.println("IfTask:");
        System.out.println("The larger number is: " + ifTask(145, 124));
        System.out.println();

        System.out.println("SwitchTask:");
        System.out.println("The distance in meters: " + switchTask(4, 124));
        System.out.println();

        System.out.println("ForTask:");
        System.out.println("Price of 1.2, 1.4,...,2 kg sweets: ");
        double[] res = forTask(12.4);
        for (int i = 0; i < res.length; i++)
            System.out.println(res[i]);
        System.out.println();

        System.out.println("WhileTask:");
        System.out.println("The double factorial of the number: " + whileTask(6));
        System.out.println();

        System.out.println("ArrayTask:");
        System.out.println("Array elements: ");
        int[] ares = arrayTask(2, -2, 5);
        for (int i = 0; i < ares.length; i++)
            System.out.print(ares[i] + ", ");
        System.out.println();
        System.out.println();

        System.out.println("MatrixTask:");
        System.out.println("Matrix elements: ");
        int[] N = {4, 2, -1, 0, 3};
        int[][] mres = matrixTask(4, 5, -2, N);
        for (int i = 0; i < 4; i++) {
            for(int j = 0; j < 5; j++) {

                System.out.print(mres[i][j] + ", ");
            }
            System.out.println();
        }
        System.out.println();
    }
}
